// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cls_logs.proto

#ifndef PROTOBUF_cls_5flogs_2eproto__INCLUDED
#define PROTOBUF_cls_5flogs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cls {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cls_5flogs_2eproto();
void protobuf_AssignDesc_cls_5flogs_2eproto();
void protobuf_ShutdownFile_cls_5flogs_2eproto();

class Log;
class Log_Content;
class LogTag;
class LogGroup;
class LogGroupList;

// ===================================================================

class Log_Content : public ::google::protobuf::Message {
 public:
  Log_Content();
  virtual ~Log_Content();

  Log_Content(const Log_Content& from);

  inline Log_Content& operator=(const Log_Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Log_Content& default_instance();

  void Swap(Log_Content* other);

  // implements Message ----------------------------------------------

  Log_Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Log_Content& from);
  void MergeFrom(const Log_Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cls.Log.Content)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_cls_5flogs_2eproto();
  friend void protobuf_AssignDesc_cls_5flogs_2eproto();
  friend void protobuf_ShutdownFile_cls_5flogs_2eproto();

  void InitAsDefaultInstance();
  static Log_Content* default_instance_;
};
// -------------------------------------------------------------------

class Log : public ::google::protobuf::Message {
 public:
  Log();
  virtual ~Log();

  Log(const Log& from);

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Log& default_instance();

  void Swap(Log* other);

  // implements Message ----------------------------------------------

  Log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Log& from);
  void MergeFrom(const Log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Log_Content Content;

  // accessors -------------------------------------------------------

  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // repeated .cls.Log.Content contents = 2;
  inline int contents_size() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::cls::Log_Content& contents(int index) const;
  inline ::cls::Log_Content* mutable_contents(int index);
  inline ::cls::Log_Content* add_contents();
  inline const ::google::protobuf::RepeatedPtrField< ::cls::Log_Content >&
      contents() const;
  inline ::google::protobuf::RepeatedPtrField< ::cls::Log_Content >*
      mutable_contents();

  // @@protoc_insertion_point(class_scope:cls.Log)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::cls::Log_Content > contents_;
  friend void  protobuf_AddDesc_cls_5flogs_2eproto();
  friend void protobuf_AssignDesc_cls_5flogs_2eproto();
  friend void protobuf_ShutdownFile_cls_5flogs_2eproto();

  void InitAsDefaultInstance();
  static Log* default_instance_;
};
// -------------------------------------------------------------------

class LogTag : public ::google::protobuf::Message {
 public:
  LogTag();
  virtual ~LogTag();

  LogTag(const LogTag& from);

  inline LogTag& operator=(const LogTag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogTag& default_instance();

  void Swap(LogTag* other);

  // implements Message ----------------------------------------------

  LogTag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogTag& from);
  void MergeFrom(const LogTag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cls.LogTag)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_cls_5flogs_2eproto();
  friend void protobuf_AssignDesc_cls_5flogs_2eproto();
  friend void protobuf_ShutdownFile_cls_5flogs_2eproto();

  void InitAsDefaultInstance();
  static LogTag* default_instance_;
};
// -------------------------------------------------------------------

class LogGroup : public ::google::protobuf::Message {
 public:
  LogGroup();
  virtual ~LogGroup();

  LogGroup(const LogGroup& from);

  inline LogGroup& operator=(const LogGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGroup& default_instance();

  void Swap(LogGroup* other);

  // implements Message ----------------------------------------------

  LogGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogGroup& from);
  void MergeFrom(const LogGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cls.Log logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::cls::Log& logs(int index) const;
  inline ::cls::Log* mutable_logs(int index);
  inline ::cls::Log* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::cls::Log >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::cls::Log >*
      mutable_logs();

  // optional string contextFlow = 2;
  inline bool has_contextflow() const;
  inline void clear_contextflow();
  static const int kContextFlowFieldNumber = 2;
  inline const ::std::string& contextflow() const;
  inline void set_contextflow(const ::std::string& value);
  inline void set_contextflow(const char* value);
  inline void set_contextflow(const char* value, size_t size);
  inline ::std::string* mutable_contextflow();
  inline ::std::string* release_contextflow();
  inline void set_allocated_contextflow(::std::string* contextflow);

  // optional string filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // repeated .cls.LogTag logTags = 5;
  inline int logtags_size() const;
  inline void clear_logtags();
  static const int kLogTagsFieldNumber = 5;
  inline const ::cls::LogTag& logtags(int index) const;
  inline ::cls::LogTag* mutable_logtags(int index);
  inline ::cls::LogTag* add_logtags();
  inline const ::google::protobuf::RepeatedPtrField< ::cls::LogTag >&
      logtags() const;
  inline ::google::protobuf::RepeatedPtrField< ::cls::LogTag >*
      mutable_logtags();

  // @@protoc_insertion_point(class_scope:cls.LogGroup)
 private:
  inline void set_has_contextflow();
  inline void clear_has_contextflow();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cls::Log > logs_;
  ::std::string* contextflow_;
  ::std::string* filename_;
  ::std::string* source_;
  ::google::protobuf::RepeatedPtrField< ::cls::LogTag > logtags_;
  friend void  protobuf_AddDesc_cls_5flogs_2eproto();
  friend void protobuf_AssignDesc_cls_5flogs_2eproto();
  friend void protobuf_ShutdownFile_cls_5flogs_2eproto();

  void InitAsDefaultInstance();
  static LogGroup* default_instance_;
};
// -------------------------------------------------------------------

class LogGroupList : public ::google::protobuf::Message {
 public:
  LogGroupList();
  virtual ~LogGroupList();

  LogGroupList(const LogGroupList& from);

  inline LogGroupList& operator=(const LogGroupList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGroupList& default_instance();

  void Swap(LogGroupList* other);

  // implements Message ----------------------------------------------

  LogGroupList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogGroupList& from);
  void MergeFrom(const LogGroupList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cls.LogGroup logGroupList = 1;
  inline int loggrouplist_size() const;
  inline void clear_loggrouplist();
  static const int kLogGroupListFieldNumber = 1;
  inline const ::cls::LogGroup& loggrouplist(int index) const;
  inline ::cls::LogGroup* mutable_loggrouplist(int index);
  inline ::cls::LogGroup* add_loggrouplist();
  inline const ::google::protobuf::RepeatedPtrField< ::cls::LogGroup >&
      loggrouplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::cls::LogGroup >*
      mutable_loggrouplist();

  // @@protoc_insertion_point(class_scope:cls.LogGroupList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cls::LogGroup > loggrouplist_;
  friend void  protobuf_AddDesc_cls_5flogs_2eproto();
  friend void protobuf_AssignDesc_cls_5flogs_2eproto();
  friend void protobuf_ShutdownFile_cls_5flogs_2eproto();

  void InitAsDefaultInstance();
  static LogGroupList* default_instance_;
};
// ===================================================================


// ===================================================================

// Log_Content

// required string key = 1;
inline bool Log_Content::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Log_Content::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Log_Content::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Log_Content::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Log_Content::key() const {
  // @@protoc_insertion_point(field_get:cls.Log.Content.key)
  return *key_;
}
inline void Log_Content::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:cls.Log.Content.key)
}
inline void Log_Content::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cls.Log.Content.key)
}
inline void Log_Content::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cls.Log.Content.key)
}
inline ::std::string* Log_Content::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cls.Log.Content.key)
  return key_;
}
inline ::std::string* Log_Content::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Log_Content::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cls.Log.Content.key)
}

// required string value = 2;
inline bool Log_Content::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Log_Content::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Log_Content::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Log_Content::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Log_Content::value() const {
  // @@protoc_insertion_point(field_get:cls.Log.Content.value)
  return *value_;
}
inline void Log_Content::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:cls.Log.Content.value)
}
inline void Log_Content::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:cls.Log.Content.value)
}
inline void Log_Content::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cls.Log.Content.value)
}
inline ::std::string* Log_Content::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cls.Log.Content.value)
  return value_;
}
inline ::std::string* Log_Content::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Log_Content::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cls.Log.Content.value)
}

// -------------------------------------------------------------------

// Log

// required int64 time = 1;
inline bool Log::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Log::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Log::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Log::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Log::time() const {
  // @@protoc_insertion_point(field_get:cls.Log.time)
  return time_;
}
inline void Log::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:cls.Log.time)
}

// repeated .cls.Log.Content contents = 2;
inline int Log::contents_size() const {
  return contents_.size();
}
inline void Log::clear_contents() {
  contents_.Clear();
}
inline const ::cls::Log_Content& Log::contents(int index) const {
  // @@protoc_insertion_point(field_get:cls.Log.contents)
  return contents_.Get(index);
}
inline ::cls::Log_Content* Log::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:cls.Log.contents)
  return contents_.Mutable(index);
}
inline ::cls::Log_Content* Log::add_contents() {
  // @@protoc_insertion_point(field_add:cls.Log.contents)
  return contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cls::Log_Content >&
Log::contents() const {
  // @@protoc_insertion_point(field_list:cls.Log.contents)
  return contents_;
}
inline ::google::protobuf::RepeatedPtrField< ::cls::Log_Content >*
Log::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:cls.Log.contents)
  return &contents_;
}

// -------------------------------------------------------------------

// LogTag

// required string key = 1;
inline bool LogTag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogTag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogTag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogTag::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& LogTag::key() const {
  // @@protoc_insertion_point(field_get:cls.LogTag.key)
  return *key_;
}
inline void LogTag::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:cls.LogTag.key)
}
inline void LogTag::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cls.LogTag.key)
}
inline void LogTag::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cls.LogTag.key)
}
inline ::std::string* LogTag::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cls.LogTag.key)
  return key_;
}
inline ::std::string* LogTag::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogTag::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cls.LogTag.key)
}

// required string value = 2;
inline bool LogTag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogTag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogTag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogTag::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& LogTag::value() const {
  // @@protoc_insertion_point(field_get:cls.LogTag.value)
  return *value_;
}
inline void LogTag::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:cls.LogTag.value)
}
inline void LogTag::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:cls.LogTag.value)
}
inline void LogTag::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cls.LogTag.value)
}
inline ::std::string* LogTag::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cls.LogTag.value)
  return value_;
}
inline ::std::string* LogTag::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogTag::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cls.LogTag.value)
}

// -------------------------------------------------------------------

// LogGroup

// repeated .cls.Log logs = 1;
inline int LogGroup::logs_size() const {
  return logs_.size();
}
inline void LogGroup::clear_logs() {
  logs_.Clear();
}
inline const ::cls::Log& LogGroup::logs(int index) const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.logs)
  return logs_.Get(index);
}
inline ::cls::Log* LogGroup::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.logs)
  return logs_.Mutable(index);
}
inline ::cls::Log* LogGroup::add_logs() {
  // @@protoc_insertion_point(field_add:cls.LogGroup.logs)
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cls::Log >&
LogGroup::logs() const {
  // @@protoc_insertion_point(field_list:cls.LogGroup.logs)
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::cls::Log >*
LogGroup::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:cls.LogGroup.logs)
  return &logs_;
}

// optional string contextFlow = 2;
inline bool LogGroup::has_contextflow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogGroup::set_has_contextflow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogGroup::clear_has_contextflow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogGroup::clear_contextflow() {
  if (contextflow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contextflow_->clear();
  }
  clear_has_contextflow();
}
inline const ::std::string& LogGroup::contextflow() const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.contextFlow)
  return *contextflow_;
}
inline void LogGroup::set_contextflow(const ::std::string& value) {
  set_has_contextflow();
  if (contextflow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contextflow_ = new ::std::string;
  }
  contextflow_->assign(value);
  // @@protoc_insertion_point(field_set:cls.LogGroup.contextFlow)
}
inline void LogGroup::set_contextflow(const char* value) {
  set_has_contextflow();
  if (contextflow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contextflow_ = new ::std::string;
  }
  contextflow_->assign(value);
  // @@protoc_insertion_point(field_set_char:cls.LogGroup.contextFlow)
}
inline void LogGroup::set_contextflow(const char* value, size_t size) {
  set_has_contextflow();
  if (contextflow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contextflow_ = new ::std::string;
  }
  contextflow_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cls.LogGroup.contextFlow)
}
inline ::std::string* LogGroup::mutable_contextflow() {
  set_has_contextflow();
  if (contextflow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contextflow_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.contextFlow)
  return contextflow_;
}
inline ::std::string* LogGroup::release_contextflow() {
  clear_has_contextflow();
  if (contextflow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contextflow_;
    contextflow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogGroup::set_allocated_contextflow(::std::string* contextflow) {
  if (contextflow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contextflow_;
  }
  if (contextflow) {
    set_has_contextflow();
    contextflow_ = contextflow;
  } else {
    clear_has_contextflow();
    contextflow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cls.LogGroup.contextFlow)
}

// optional string filename = 3;
inline bool LogGroup::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogGroup::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogGroup::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogGroup::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& LogGroup::filename() const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.filename)
  return *filename_;
}
inline void LogGroup::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:cls.LogGroup.filename)
}
inline void LogGroup::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:cls.LogGroup.filename)
}
inline void LogGroup::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cls.LogGroup.filename)
}
inline ::std::string* LogGroup::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.filename)
  return filename_;
}
inline ::std::string* LogGroup::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogGroup::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cls.LogGroup.filename)
}

// optional string source = 4;
inline bool LogGroup::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogGroup::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogGroup::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogGroup::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& LogGroup::source() const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.source)
  return *source_;
}
inline void LogGroup::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:cls.LogGroup.source)
}
inline void LogGroup::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:cls.LogGroup.source)
}
inline void LogGroup::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cls.LogGroup.source)
}
inline ::std::string* LogGroup::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.source)
  return source_;
}
inline ::std::string* LogGroup::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogGroup::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cls.LogGroup.source)
}

// repeated .cls.LogTag logTags = 5;
inline int LogGroup::logtags_size() const {
  return logtags_.size();
}
inline void LogGroup::clear_logtags() {
  logtags_.Clear();
}
inline const ::cls::LogTag& LogGroup::logtags(int index) const {
  // @@protoc_insertion_point(field_get:cls.LogGroup.logTags)
  return logtags_.Get(index);
}
inline ::cls::LogTag* LogGroup::mutable_logtags(int index) {
  // @@protoc_insertion_point(field_mutable:cls.LogGroup.logTags)
  return logtags_.Mutable(index);
}
inline ::cls::LogTag* LogGroup::add_logtags() {
  // @@protoc_insertion_point(field_add:cls.LogGroup.logTags)
  return logtags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cls::LogTag >&
LogGroup::logtags() const {
  // @@protoc_insertion_point(field_list:cls.LogGroup.logTags)
  return logtags_;
}
inline ::google::protobuf::RepeatedPtrField< ::cls::LogTag >*
LogGroup::mutable_logtags() {
  // @@protoc_insertion_point(field_mutable_list:cls.LogGroup.logTags)
  return &logtags_;
}

// -------------------------------------------------------------------

// LogGroupList

// repeated .cls.LogGroup logGroupList = 1;
inline int LogGroupList::loggrouplist_size() const {
  return loggrouplist_.size();
}
inline void LogGroupList::clear_loggrouplist() {
  loggrouplist_.Clear();
}
inline const ::cls::LogGroup& LogGroupList::loggrouplist(int index) const {
  // @@protoc_insertion_point(field_get:cls.LogGroupList.logGroupList)
  return loggrouplist_.Get(index);
}
inline ::cls::LogGroup* LogGroupList::mutable_loggrouplist(int index) {
  // @@protoc_insertion_point(field_mutable:cls.LogGroupList.logGroupList)
  return loggrouplist_.Mutable(index);
}
inline ::cls::LogGroup* LogGroupList::add_loggrouplist() {
  // @@protoc_insertion_point(field_add:cls.LogGroupList.logGroupList)
  return loggrouplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cls::LogGroup >&
LogGroupList::loggrouplist() const {
  // @@protoc_insertion_point(field_list:cls.LogGroupList.logGroupList)
  return loggrouplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::cls::LogGroup >*
LogGroupList::mutable_loggrouplist() {
  // @@protoc_insertion_point(field_mutable_list:cls.LogGroupList.logGroupList)
  return &loggrouplist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cls

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cls_5flogs_2eproto__INCLUDED
