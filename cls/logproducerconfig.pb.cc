// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logproducerconfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logproducerconfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cls_config {

namespace {

const ::google::protobuf::Descriptor* LogProducerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogProducerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_logproducerconfig_2eproto() {
  protobuf_AddDesc_logproducerconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logproducerconfig.proto");
  GOOGLE_CHECK(file != NULL);
  LogProducerConfig_descriptor_ = file->message_type(0);
  static const int LogProducerConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, totalsizelnbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, maxsendworkercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, maxblocksec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, maxbatchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, lingerms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, retries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, baseretrybackoffms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, maxretrybackoffms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, compressflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, socktimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, connecttimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, acceskeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, accesskeysecret_),
  };
  LogProducerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogProducerConfig_descriptor_,
      LogProducerConfig::default_instance_,
      LogProducerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogProducerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogProducerConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logproducerconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogProducerConfig_descriptor_, &LogProducerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logproducerconfig_2eproto() {
  delete LogProducerConfig::default_instance_;
  delete LogProducerConfig_reflection_;
}

void protobuf_AddDesc_logproducerconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027logproducerconfig.proto\022\ncls_config\"\236\003"
    "\n\021LogProducerConfig\022#\n\020TotalSizeLnBytes\030"
    "\001 \001(\004:\t104857600\022\036\n\022MaxSendWorkerCount\030\002"
    " \001(\004:\00250\022\027\n\013MaxBlockSec\030\003 \001(\004:\00260\022\034\n\014Max"
    "BatchSize\030\004 \001(\004:\006524288\022\026\n\010LingerMs\030\005 \001("
    "\004:\0042000\022\023\n\007Retries\030\006 \001(\004:\00210\022\037\n\022BaseRetr"
    "yBackoffMs\030\007 \001(\004:\003100\022 \n\021MaxRetryBackoff"
    "Ms\030\010 \001(\004:\00550000\022\032\n\014compressflag\030\t \001(\010:\004t"
    "rue\022\016\n\006source\030\n \001(\t\022\027\n\013SockTimeout\030\013 \001(\004"
    ":\00230\022\031\n\016ConnectTimeout\030\014 \001(\004:\0015\022\020\n\010Endpo"
    "int\030\r \002(\t\022\022\n\nAccesKeyId\030\016 \002(\t\022\027\n\017AccessK"
    "eySecret\030\017 \002(\t", 454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logproducerconfig.proto", &protobuf_RegisterTypes);
  LogProducerConfig::default_instance_ = new LogProducerConfig();
  LogProducerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logproducerconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logproducerconfig_2eproto {
  StaticDescriptorInitializer_logproducerconfig_2eproto() {
    protobuf_AddDesc_logproducerconfig_2eproto();
  }
} static_descriptor_initializer_logproducerconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LogProducerConfig::kTotalSizeLnBytesFieldNumber;
const int LogProducerConfig::kMaxSendWorkerCountFieldNumber;
const int LogProducerConfig::kMaxBlockSecFieldNumber;
const int LogProducerConfig::kMaxBatchSizeFieldNumber;
const int LogProducerConfig::kLingerMsFieldNumber;
const int LogProducerConfig::kRetriesFieldNumber;
const int LogProducerConfig::kBaseRetryBackoffMsFieldNumber;
const int LogProducerConfig::kMaxRetryBackoffMsFieldNumber;
const int LogProducerConfig::kCompressflagFieldNumber;
const int LogProducerConfig::kSourceFieldNumber;
const int LogProducerConfig::kSockTimeoutFieldNumber;
const int LogProducerConfig::kConnectTimeoutFieldNumber;
const int LogProducerConfig::kEndpointFieldNumber;
const int LogProducerConfig::kAccesKeyIdFieldNumber;
const int LogProducerConfig::kAccessKeySecretFieldNumber;
#endif  // !_MSC_VER

LogProducerConfig::LogProducerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cls_config.LogProducerConfig)
}

void LogProducerConfig::InitAsDefaultInstance() {
}

LogProducerConfig::LogProducerConfig(const LogProducerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cls_config.LogProducerConfig)
}

void LogProducerConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  totalsizelnbytes_ = GOOGLE_ULONGLONG(104857600);
  maxsendworkercount_ = GOOGLE_ULONGLONG(50);
  maxblocksec_ = GOOGLE_ULONGLONG(60);
  maxbatchsize_ = GOOGLE_ULONGLONG(524288);
  lingerms_ = GOOGLE_ULONGLONG(2000);
  retries_ = GOOGLE_ULONGLONG(10);
  baseretrybackoffms_ = GOOGLE_ULONGLONG(100);
  maxretrybackoffms_ = GOOGLE_ULONGLONG(50000);
  compressflag_ = true;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socktimeout_ = GOOGLE_ULONGLONG(30);
  connecttimeout_ = GOOGLE_ULONGLONG(5);
  endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acceskeyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesskeysecret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogProducerConfig::~LogProducerConfig() {
  // @@protoc_insertion_point(destructor:cls_config.LogProducerConfig)
  SharedDtor();
}

void LogProducerConfig::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endpoint_;
  }
  if (acceskeyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acceskeyid_;
  }
  if (accesskeysecret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accesskeysecret_;
  }
  if (this != default_instance_) {
  }
}

void LogProducerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogProducerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogProducerConfig_descriptor_;
}

const LogProducerConfig& LogProducerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logproducerconfig_2eproto();
  return *default_instance_;
}

LogProducerConfig* LogProducerConfig::default_instance_ = NULL;

LogProducerConfig* LogProducerConfig::New() const {
  return new LogProducerConfig;
}

void LogProducerConfig::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    totalsizelnbytes_ = GOOGLE_ULONGLONG(104857600);
    maxsendworkercount_ = GOOGLE_ULONGLONG(50);
    maxblocksec_ = GOOGLE_ULONGLONG(60);
    maxbatchsize_ = GOOGLE_ULONGLONG(524288);
    lingerms_ = GOOGLE_ULONGLONG(2000);
    retries_ = GOOGLE_ULONGLONG(10);
    baseretrybackoffms_ = GOOGLE_ULONGLONG(100);
    maxretrybackoffms_ = GOOGLE_ULONGLONG(50000);
  }
  if (_has_bits_[8 / 32] & 32512) {
    compressflag_ = true;
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    socktimeout_ = GOOGLE_ULONGLONG(30);
    connecttimeout_ = GOOGLE_ULONGLONG(5);
    if (has_endpoint()) {
      if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endpoint_->clear();
      }
    }
    if (has_acceskeyid()) {
      if (acceskeyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acceskeyid_->clear();
      }
    }
    if (has_accesskeysecret()) {
      if (accesskeysecret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accesskeysecret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogProducerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cls_config.LogProducerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalsizelnbytes_)));
          set_has_totalsizelnbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxSendWorkerCount;
        break;
      }

      // optional uint64 MaxSendWorkerCount = 2 [default = 50];
      case 2: {
        if (tag == 16) {
         parse_MaxSendWorkerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxsendworkercount_)));
          set_has_maxsendworkercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxBlockSec;
        break;
      }

      // optional uint64 MaxBlockSec = 3 [default = 60];
      case 3: {
        if (tag == 24) {
         parse_MaxBlockSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxblocksec_)));
          set_has_maxblocksec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxBatchSize;
        break;
      }

      // optional uint64 MaxBatchSize = 4 [default = 524288];
      case 4: {
        if (tag == 32) {
         parse_MaxBatchSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxbatchsize_)));
          set_has_maxbatchsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LingerMs;
        break;
      }

      // optional uint64 LingerMs = 5 [default = 2000];
      case 5: {
        if (tag == 40) {
         parse_LingerMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lingerms_)));
          set_has_lingerms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Retries;
        break;
      }

      // optional uint64 Retries = 6 [default = 10];
      case 6: {
        if (tag == 48) {
         parse_Retries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &retries_)));
          set_has_retries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BaseRetryBackoffMs;
        break;
      }

      // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
      case 7: {
        if (tag == 56) {
         parse_BaseRetryBackoffMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &baseretrybackoffms_)));
          set_has_baseretrybackoffms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_MaxRetryBackoffMs;
        break;
      }

      // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
      case 8: {
        if (tag == 64) {
         parse_MaxRetryBackoffMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxretrybackoffms_)));
          set_has_maxretrybackoffms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_compressflag;
        break;
      }

      // optional bool compressflag = 9 [default = true];
      case 9: {
        if (tag == 72) {
         parse_compressflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressflag_)));
          set_has_compressflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_source;
        break;
      }

      // optional string source = 10;
      case 10: {
        if (tag == 82) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_SockTimeout;
        break;
      }

      // optional uint64 SockTimeout = 11 [default = 30];
      case 11: {
        if (tag == 88) {
         parse_SockTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &socktimeout_)));
          set_has_socktimeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ConnectTimeout;
        break;
      }

      // optional uint64 ConnectTimeout = 12 [default = 5];
      case 12: {
        if (tag == 96) {
         parse_ConnectTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connecttimeout_)));
          set_has_connecttimeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Endpoint;
        break;
      }

      // required string Endpoint = 13;
      case 13: {
        if (tag == 106) {
         parse_Endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endpoint().data(), this->endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_AccesKeyId;
        break;
      }

      // required string AccesKeyId = 14;
      case 14: {
        if (tag == 114) {
         parse_AccesKeyId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acceskeyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acceskeyid().data(), this->acceskeyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acceskeyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_AccessKeySecret;
        break;
      }

      // required string AccessKeySecret = 15;
      case 15: {
        if (tag == 122) {
         parse_AccessKeySecret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesskeysecret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accesskeysecret().data(), this->accesskeysecret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accesskeysecret");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cls_config.LogProducerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cls_config.LogProducerConfig)
  return false;
#undef DO_
}

void LogProducerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cls_config.LogProducerConfig)
  // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
  if (has_totalsizelnbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->totalsizelnbytes(), output);
  }

  // optional uint64 MaxSendWorkerCount = 2 [default = 50];
  if (has_maxsendworkercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->maxsendworkercount(), output);
  }

  // optional uint64 MaxBlockSec = 3 [default = 60];
  if (has_maxblocksec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxblocksec(), output);
  }

  // optional uint64 MaxBatchSize = 4 [default = 524288];
  if (has_maxbatchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxbatchsize(), output);
  }

  // optional uint64 LingerMs = 5 [default = 2000];
  if (has_lingerms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lingerms(), output);
  }

  // optional uint64 Retries = 6 [default = 10];
  if (has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->retries(), output);
  }

  // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
  if (has_baseretrybackoffms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->baseretrybackoffms(), output);
  }

  // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
  if (has_maxretrybackoffms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->maxretrybackoffms(), output);
  }

  // optional bool compressflag = 9 [default = true];
  if (has_compressflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->compressflag(), output);
  }

  // optional string source = 10;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->source(), output);
  }

  // optional uint64 SockTimeout = 11 [default = 30];
  if (has_socktimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->socktimeout(), output);
  }

  // optional uint64 ConnectTimeout = 12 [default = 5];
  if (has_connecttimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->connecttimeout(), output);
  }

  // required string Endpoint = 13;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->endpoint(), output);
  }

  // required string AccesKeyId = 14;
  if (has_acceskeyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acceskeyid().data(), this->acceskeyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acceskeyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->acceskeyid(), output);
  }

  // required string AccessKeySecret = 15;
  if (has_accesskeysecret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesskeysecret().data(), this->accesskeysecret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesskeysecret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->accesskeysecret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cls_config.LogProducerConfig)
}

::google::protobuf::uint8* LogProducerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cls_config.LogProducerConfig)
  // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
  if (has_totalsizelnbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->totalsizelnbytes(), target);
  }

  // optional uint64 MaxSendWorkerCount = 2 [default = 50];
  if (has_maxsendworkercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->maxsendworkercount(), target);
  }

  // optional uint64 MaxBlockSec = 3 [default = 60];
  if (has_maxblocksec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxblocksec(), target);
  }

  // optional uint64 MaxBatchSize = 4 [default = 524288];
  if (has_maxbatchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxbatchsize(), target);
  }

  // optional uint64 LingerMs = 5 [default = 2000];
  if (has_lingerms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lingerms(), target);
  }

  // optional uint64 Retries = 6 [default = 10];
  if (has_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->retries(), target);
  }

  // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
  if (has_baseretrybackoffms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->baseretrybackoffms(), target);
  }

  // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
  if (has_maxretrybackoffms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->maxretrybackoffms(), target);
  }

  // optional bool compressflag = 9 [default = true];
  if (has_compressflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->compressflag(), target);
  }

  // optional string source = 10;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->source(), target);
  }

  // optional uint64 SockTimeout = 11 [default = 30];
  if (has_socktimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->socktimeout(), target);
  }

  // optional uint64 ConnectTimeout = 12 [default = 5];
  if (has_connecttimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->connecttimeout(), target);
  }

  // required string Endpoint = 13;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->endpoint(), target);
  }

  // required string AccesKeyId = 14;
  if (has_acceskeyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acceskeyid().data(), this->acceskeyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acceskeyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->acceskeyid(), target);
  }

  // required string AccessKeySecret = 15;
  if (has_accesskeysecret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesskeysecret().data(), this->accesskeysecret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesskeysecret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->accesskeysecret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cls_config.LogProducerConfig)
  return target;
}

int LogProducerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TotalSizeLnBytes = 1 [default = 104857600];
    if (has_totalsizelnbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalsizelnbytes());
    }

    // optional uint64 MaxSendWorkerCount = 2 [default = 50];
    if (has_maxsendworkercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxsendworkercount());
    }

    // optional uint64 MaxBlockSec = 3 [default = 60];
    if (has_maxblocksec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxblocksec());
    }

    // optional uint64 MaxBatchSize = 4 [default = 524288];
    if (has_maxbatchsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxbatchsize());
    }

    // optional uint64 LingerMs = 5 [default = 2000];
    if (has_lingerms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lingerms());
    }

    // optional uint64 Retries = 6 [default = 10];
    if (has_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->retries());
    }

    // optional uint64 BaseRetryBackoffMs = 7 [default = 100];
    if (has_baseretrybackoffms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->baseretrybackoffms());
    }

    // optional uint64 MaxRetryBackoffMs = 8 [default = 50000];
    if (has_maxretrybackoffms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxretrybackoffms());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool compressflag = 9 [default = true];
    if (has_compressflag()) {
      total_size += 1 + 1;
    }

    // optional string source = 10;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint64 SockTimeout = 11 [default = 30];
    if (has_socktimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->socktimeout());
    }

    // optional uint64 ConnectTimeout = 12 [default = 5];
    if (has_connecttimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->connecttimeout());
    }

    // required string Endpoint = 13;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endpoint());
    }

    // required string AccesKeyId = 14;
    if (has_acceskeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acceskeyid());
    }

    // required string AccessKeySecret = 15;
    if (has_accesskeysecret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesskeysecret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogProducerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogProducerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogProducerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogProducerConfig::MergeFrom(const LogProducerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalsizelnbytes()) {
      set_totalsizelnbytes(from.totalsizelnbytes());
    }
    if (from.has_maxsendworkercount()) {
      set_maxsendworkercount(from.maxsendworkercount());
    }
    if (from.has_maxblocksec()) {
      set_maxblocksec(from.maxblocksec());
    }
    if (from.has_maxbatchsize()) {
      set_maxbatchsize(from.maxbatchsize());
    }
    if (from.has_lingerms()) {
      set_lingerms(from.lingerms());
    }
    if (from.has_retries()) {
      set_retries(from.retries());
    }
    if (from.has_baseretrybackoffms()) {
      set_baseretrybackoffms(from.baseretrybackoffms());
    }
    if (from.has_maxretrybackoffms()) {
      set_maxretrybackoffms(from.maxretrybackoffms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_compressflag()) {
      set_compressflag(from.compressflag());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_socktimeout()) {
      set_socktimeout(from.socktimeout());
    }
    if (from.has_connecttimeout()) {
      set_connecttimeout(from.connecttimeout());
    }
    if (from.has_endpoint()) {
      set_endpoint(from.endpoint());
    }
    if (from.has_acceskeyid()) {
      set_acceskeyid(from.acceskeyid());
    }
    if (from.has_accesskeysecret()) {
      set_accesskeysecret(from.accesskeysecret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogProducerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogProducerConfig::CopyFrom(const LogProducerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogProducerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007000) != 0x00007000) return false;

  return true;
}

void LogProducerConfig::Swap(LogProducerConfig* other) {
  if (other != this) {
    std::swap(totalsizelnbytes_, other->totalsizelnbytes_);
    std::swap(maxsendworkercount_, other->maxsendworkercount_);
    std::swap(maxblocksec_, other->maxblocksec_);
    std::swap(maxbatchsize_, other->maxbatchsize_);
    std::swap(lingerms_, other->lingerms_);
    std::swap(retries_, other->retries_);
    std::swap(baseretrybackoffms_, other->baseretrybackoffms_);
    std::swap(maxretrybackoffms_, other->maxretrybackoffms_);
    std::swap(compressflag_, other->compressflag_);
    std::swap(source_, other->source_);
    std::swap(socktimeout_, other->socktimeout_);
    std::swap(connecttimeout_, other->connecttimeout_);
    std::swap(endpoint_, other->endpoint_);
    std::swap(acceskeyid_, other->acceskeyid_);
    std::swap(accesskeysecret_, other->accesskeysecret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogProducerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogProducerConfig_descriptor_;
  metadata.reflection = LogProducerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cls_config

// @@protoc_insertion_point(global_scope)
